name: Download Torrent with Deluge

on:
  push:
    branches:
      - fork-and-run  # Change this to your default branch as necessary

jobs:
  run-deluge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Deluge and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y deluged deluge-console

      - name: Start Deluge Daemon
        run: |
          deluged &
          sleep 10  # Wait for the daemon to start

      - name: Add Torrent Using Deluge Console
        run: |
          deluge-console add "magnet:?xt=urn:btih:0D4AF725CC7CDF3CE933E5BFF8C0B3A6ED6E0D93&dn=Python+Programming+And+Maching+Learning+Understanding+How+To+Cod"

      - name: Wait Before Checking Torrent Status
        run: sleep 120  # Wait 120 seconds (adjust as necessary)

      - name: Check Torrent Status
        id: check_status
        run: |
          state=$(deluge-console info | grep 'State:' | awk '{print $2}')
          echo "Current Torrent State: $state"
          if [[ "$state" == "Finished" ]]; then
            echo "Torrent download is complete."
            echo "status=complete" >> $GITHUB_ENV
          else
            echo "Torrent download is still in progress or failed."
            echo "status=failed" >> $GITHUB_ENV
          fi

      - name: List Downloaded Files
        if: env.status == 'complete'
        run: |
          download_dir="$HOME/Downloads"  # Adjust this as necessary
          echo "Files in $download_dir:"
          ls -lh "$download_dir" || true  # Use '|| true' to avoid failing the step if the directory is empty.

      - name: Upload Downloaded Files as Artifacts
        if: env.status == 'complete'
        uses: actions/upload-artifact@v2
        with:
          name: downloaded-files
          path: "$HOME/Downloads/*"  # Adjust this path based on where Deluge saves downloaded files.
